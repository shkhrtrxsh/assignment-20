ans1)
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

int findMaxSubtreeSum(Node* root, int& maxSum) {
    if (root == nullptr)
        return 0;

    int leftSum = findMaxSubtreeSum(root->left, maxSum);
    int rightSum = findMaxSubtreeSum(root->right, maxSum);

    int subtreeSum = root->data + leftSum + rightSum;

    maxSum = max(maxSum, subtreeSum);

    return subtreeSum;
}

int findMaxSubtreeSum(Node* root) {
    int maxSum = INT_MIN;
    findMaxSubtreeSum(root, maxSum);
    return maxSum;
}

int main() {
    // Create the binary tree
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    root->right->right = new Node(7);

    int maxSum = findMaxSubtreeSum(root);

    cout << "Maximum sum of a subtree: " << maxSum << endl;

    return 0;
}



ans2)
#include <iostream>
#include <queue>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

Node* constructBSTFromLevelOrder(int arr[], int n) {
    if (n == 0)
        return nullptr;

    Node* root = new Node(arr[0]);

    queue<Node*> q;
    q.push(root);

    int i = 1;

    while (i < n && !q.empty()) {
        Node* current = q.front();
        q.pop();

        if (i < n && arr[i] < current->data) {
            current->left = new Node(arr[i]);
            q.push(current->left);
            i++;
        }

        if (i < n && arr[i] > current->data) {
            current->right = new Node(arr[i]);
            q.push(current->right);
            i++;
        }
    }

    return root;
}

void inorderTraversal(Node* root) {
    if (root == nullptr)
        return;

    inorderTraversal(root->left);
    cout << root->data << " ";
    inorderTraversal(root->right);
}

int main() {
    int arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10};
    int n = sizeof(arr) / sizeof(arr[0]);

    Node* root = constructBSTFromLevelOrder(arr, n);

    cout << "BST constructed from level order traversal: ";
    inorderTraversal(root);
    cout << endl;

    return 0;
}



ans3)
#include <iostream>
using namespace std;

bool isLevelOrderBST(int arr[], int n) {
    if (n == 0 || n == 1)
        return true;

    int i = 1;

    while (i < n && arr[i] < arr[0])
        i++;

    for (int j = i; j < n; j++) {
        if (arr[j] < arr[0])
            return false;
    }

    bool leftBST = isLevelOrderBST(arr, i);
   bool rightBST = isLevelOrderBST(arr + i, n - i);

    return leftBST && rightBST;
}

int main() {
    int arr1[] = {7, 4, 12, 3, 6, 8, 1, 5, 10};
    int n1 = sizeof(arr1) / sizeof(arr1[0]);

    if (isLevelOrderBST(arr1, n1))
        cout << "The given array represents the level order traversal of a BST." << endl;
    else
        cout << "The given array does not represent the level order traversal of a BST." << endl;

    int arr2[] = {11, 6, 13, 5, 12, 10};
    int n2 = sizeof(arr2) / sizeof(arr2[0]);

    if (isLevelOrderBST(arr2, n2))
        cout << "The given array represents the level order traversal of a BST." << endl;
    else
        cout << "The given array does not represent the level order traversal of a BST." << endl;

    return 0;
}